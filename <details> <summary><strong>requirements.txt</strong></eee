"""
app.py  ‚Äì  Streamlit front-end
"""
import yaml, pandas as pd, streamlit as st, datetime as dt
import fetch, astro
from flatlib.chart import Chart

st.set_page_config(page_title="Astro-Trading Dashboard", layout="wide")
st.title("üåô  Astro-Trading Dashboard")

cfg = yaml.safe_load(open("config.yaml"))
natal = astro.load_natal(cfg["birth"])

# ---------- sync wallets ----------
if st.sidebar.button("üîÑ  Sync wallets"):
    dfs = []
    hl_addr = cfg["wallets"]["evm"]
    alchemy = st.secrets["ALCHEMY_API_KEY"]
    helius  = st.secrets["HELIUS_API_KEY"]

    dfs.append(fetch.hyperliquid_fills(hl_addr))
    dfs.append(fetch.evm_transfers(hl_addr, alchemy))
    dfs.append(fetch.sol_tx(cfg["wallets"]["sol"], helius))

    trades = pd.concat(dfs, ignore_index=True)
    trades.to_csv("latest.csv", index=False)
    st.success(f"Fetched {len(trades):,} trades üéâ")

# ---------- enrich ----------
if st.sidebar.button("üå†  Run astro enrichment"):
    trades = pd.read_csv("latest.csv")
    trades["timestamp"] = pd.to_datetime(trades["timestamp"], errors="coerce")
    trades["date"]      = trades["timestamp"].dt.date

    # moon + sun sign
    def sun_sign(d):
        m, d = d.month, d.day
        return (
            "Capricorn" if (m == 12 and d >= 22) or (m == 1 and d <= 19) else
            "Aquarius" if (m == 1 and d >= 20) or (m == 2 and d <= 18) else
            "Pisces" if (m == 2 and d >= 19) or (m == 3 and d <= 20) else
            "Aries" if (m == 3 and d >= 21) or (m == 4 and d <= 19) else
            "Taurus" if (m == 4 and d >= 20) or (m == 5 and d <= 20) else
            "Gemini" if (m == 5 and d >= 21) or (m == 6 and d <= 20) else
            "Cancer" if (m == 6 and d >= 21) or (m == 7 and d <= 22) else
            "Leo" if (m == 7 and d >= 23) or (m == 8 and d <= 22) else
            "Virgo" if (m == 8 and d >= 23) or (m == 9 and d <= 22) else
            "Libra" if (m == 9 and d >= 23) or (m == 10 and d <= 22) else
            "Scorpio" if (m == 10 and d >= 23) or (m == 11 and d <= 21) else
            "Sagittarius"
        )

    def moon_phase(d):
        y, m, dd = d.year, d.month, d.day
        if m < 3:
            y -= 1; m += 12
        m += 1
        jd = (365.25*y + 30.6*m + dd - 694039.09) / 29.5305882 % 1
        idx = int(jd*8 + .5) & 7
        return ["New", "WaxX", "FirstQ", "WaxG", "Full",
                "WanG", "LastQ", "WanX"][idx]

    trades["sun_sign"]  = trades["date"].apply(sun_sign)
    trades["moon_phase"]= trades["date"].apply(moon_phase)

    # natal aspects
    hits = []
    for ts in trades["timestamp"]:
        chart = Chart(ts.isoformat(), natal.observer)
        hits.append("|".join(astro.active_aspects(natal, chart)))
    trades["aspects"] = hits

    trades.to_csv("enriched.csv", index=False)
    st.success("Enriched with cosmic data! üåå")

    # ---------- KPI & heat-map ----------
    st.subheader("üöÄ  Performance by Moon phase √ó Sun sign")
    pivot = trades.pivot_table(index="moon_phase", columns="sun_sign",
                               values="pnl", aggfunc="sum", fill_value=0)
    st.dataframe(pivot.style.format("{:,.2f}"))

    st.subheader("üéØ  Token-level P&L")
    by_token = (trades.groupby(["venue", "asset"])
                .agg(total_pnl=("pnl", "sum"),
                     trades=("pnl", "count"),
                     win_rate=("pnl", lambda x: (x>0).mean()))
                .sort_values("total_pnl", ascending=False))
    st.dataframe(by_token.style.format("{:,.2f}"))
else:
    st.info("‚ÜñÔ∏è  First sync, then enrich to view dashboards.")
